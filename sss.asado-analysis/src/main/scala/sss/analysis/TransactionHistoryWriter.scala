package sss.analysis

import sss.db.Db
import sss.asado.util.ByteArrayEncodedStrOps._


/**
  * Created by alan on 12/15/16.
  */
class TransactionHistoryWriter(implicit db:Db) {

  private val idCol = "id"
  private val amountCol = "amount"
  private val whoCol = "who"
  private val txIdCol = "txid"
  private val inCol = "in_flag"
  private val tableName = "tx_history"

  import sss.analysis.TransactionHistory._

  private val dropTableSql = s"DROP TABLE IF EXISTS ${tableName}"

  private val createTableSql =
    s"""CREATE TABLE IF NOT EXISTS ${tableName}
       |($idCol BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
       |$txIdCol VARCHAR(64),
       |$whoCol VARCHAR(120),
       |$amountCol INT,
       |$inCol BOOLEAN);
       |""".stripMargin

  db.executeSql(createTableSql)

  private val txTable = db.table(tableName)

  def dropTable = db.executeSql(dropTableSql)

  def write(txs: Stream[ExpandedTx]): Unit = {
    db.tx {
      txs.foreach { expendedTx =>
        expendedTx.ins.foreach { expandedElement =>
          txTable.insert(Map(txIdCol -> expandedElement.txId.toBase64Str,
            whoCol -> expandedElement.identity,
            amountCol -> expandedElement.amount,
            inCol -> true))

        }
        expendedTx.outs.foreach { expandedElement =>
          txTable.insert(Map(txIdCol -> expandedElement.txId.toBase64Str,
            whoCol -> expandedElement.identity,
            amountCol -> expandedElement.amount,
            inCol -> false))
        }
      }
    }
  }

}
