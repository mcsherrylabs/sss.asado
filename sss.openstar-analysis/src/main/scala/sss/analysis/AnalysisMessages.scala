package sss.analysis

import java.util.Date

import org.joda.time.DateTime
import sss.db._

/**
  * Created by alan on 11/11/16.
  */
object AnalysisMessages {
  case class Message(blockHeight:Long, msg: String, msgType: MessageType, at: DateTime)

  type MessageType = Int
  val info = 1
  val warn = 2
  val error = 3

  private val tableName = "analysis_messages"
  private val idCol = "id"
  private val blockHeightCol = "block_height"
  private val messageTypeCol = "msg_class"
  private val messageCol = "msg"
  private val atCol = "atCol"

  private def createTableSql =
    s"""CREATE TABLE IF NOT EXISTS $tableName
        |($idCol BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
        |$blockHeightCol BIGINT,
        |$messageTypeCol INT,
        |$messageCol VARCHAR(200),
        |$atCol BIGINT);
        |""".stripMargin


  private def rowToMessage(r: Row): Message = {
    Message(r[Long](blockHeightCol), r[String](messageCol), r[Int](messageTypeCol),
      new DateTime(r[Long](atCol)))
  }

}

class AnalysisMessages(blockHeight: Long)(implicit db:Db) {

  import AnalysisMessages._


  private lazy val messageTable = {
    db.executeSql(createTableSql)
    db.table(tableName)
  }


  def write(msg: String, msgType: MessageType = error): Unit = {
    require(msgType > 0 && msgType < 4, s"MsgType $msgType is not understood.")
    messageTable.persist(Map(blockHeightCol -> blockHeight,
      messageTypeCol -> msgType,
      messageCol -> msg,
      atCol -> new Date()))
  }

  def delete = messageTable.delete( where(s"$blockHeightCol = ?") using blockHeight)

  def apply(): Seq[Message] = {
    messageTable.filter(blockHeightCol -> blockHeight) map rowToMessage
  }
}
