package sss.asado.quorumledger


import java.sql.SQLIntegrityConstraintViolationException

import sss.ancillary.Logging
import sss.asado.UniqueNodeIdentifier
import sss.asado.chains.Chains.GlobalChainIdMask
import sss.db._
import QuorumService._

import scala.util.{Failure, Success, Try}

/**
  *
  * @param uniqueChainId will be used as part of a db table name, only standard characters allowed.
  * @param db
  */

trait QuorumServiceQuery {
  def candidates(): Set[UniqueNodeIdentifier]
}

object QuorumService {

  private[quorumledger] def quorumTableName(uniqueChainId: GlobalChainIdMask) = s"quorum_tbl_$uniqueChainId"
  private[quorumledger] val id = "id"
  private[quorumledger] val identityCol = "identity_col"


  def create(uniqueChainId: GlobalChainIdMask, owners: UniqueNodeIdentifier*)(implicit db:Db):QuorumService = {
    // no duplicate mambers allowed via PK
    val tableName = quorumTableName(uniqueChainId)
    val createQuorumTableSql =
    s"""CREATE TABLE ${tableName}
       |($id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) UNIQUE,
       |$identityCol VARCHAR(100),
       |PRIMARY KEY($identityCol));
       |""".stripMargin

    db.executeSql(createQuorumTableSql)

    val result = new QuorumService(uniqueChainId)
    owners foreach (result.add)

    result
  }

}
class QuorumService(private[quorumledger] val uniqueChainId: GlobalChainIdMask)(implicit db:Db)
  extends QuorumServiceQuery with Logging {

  private lazy val table = db.table(quorumTableName(uniqueChainId))

  override def candidates(): Set[UniqueNodeIdentifier] = {
    (for {
      r <- table
    } yield(r[String](identityCol))).toSet
  }

  def add(newCandidate: UniqueNodeIdentifier): Set[UniqueNodeIdentifier] = {
    Try (table persist (Map(identityCol -> newCandidate))) match {
      case Failure(e: SQLIntegrityConstraintViolationException) =>
        log.warn(s"Cannot add existing member as newMember. $newCandidate")
        candidates()
      case Failure(e) => throw e
      case Success(_) => candidates()
    }
  }

  def remove(candidate: UniqueNodeIdentifier): Set[UniqueNodeIdentifier] = {
    val deleted = table.delete(where(identityCol -> candidate))
    assert(deleted == 1 || deleted == 0, s"$deleted rows deleted from quorum ledger $uniqueChainId, should only be 0 or 1")
    candidates()
  }

}
