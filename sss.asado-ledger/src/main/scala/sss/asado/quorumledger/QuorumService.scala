package sss.asado.quorumledger


import sss.db._

/**
  *
  * @param uniqueId will be used as part of a db table name, only standard characters allowed.
  * @param db
  */
class QuorumService(uniqueId: String)(implicit db:Db) {

  private val quorumTableName = s"quorum_tbl_$uniqueId"
  private val id = "id"
  private val identityCol = "identity_col"

  private val createQuorumTableSql =
    s"""CREATE TABLE IF NOT EXISTS ${quorumTableName}
       |($id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) UNIQUE,
       |$identityCol VARCHAR(100),
       |PRIMARY KEY($identityCol));
       |""".stripMargin

  db.executeSql(createQuorumTableSql)

  private lazy val table = db.table(quorumTableName)

  def members(): Seq[String] = {
    for {
      r <- table
    } yield(r[String](identityCol))
  }

  def add(newMember: String): Seq[String] = {
    table persist (Map(identityCol -> newMember))
    members()
  }

  def remove(member: String): Seq[String] = {
    val deleted = table.delete(where(identityCol -> member))
    assert(deleted == 1 || deleted == 0, s"$deleted rows deleted from quorum ledger $uniqueId, should only be 0 or 1")
    members()
  }

}
