
memento.folder = "./"
datafolder = "/home/alan/extra2/data/asado/"

node {

  messagebox {
    minNumBlocksInWhichToClaim = 120
    chargePerMessage = 0
  }

  reportIntervalSeconds = 3
  reportUrl = "wss://localhost:9123/telemetry"
  telemetryHostVerificationOff = true
  discoveryInterval = "30 seconds"
  peers = []
  dnsSeedUrl = "https://openstar.io.breakit/openstar_seed_ip.txt"
  clientRefCacheSize = 5000

  homeDomain {
    //nodeId = "bob"
    //publicKey = "3D3FB6F8C86AD2D6A54902DC5F642D0AC2AD4F21FAEE15B940C5260D5B05EC30"
    //dns = "localhost"
    httpPort = 8071
    tcpPort = 7071
  }

  httpServerConfig {
    contextPath= "/"
    resourceBase = "WebContent"
    httpPort= 8080
    httpsPort= 8443
    useHttpConnector= true
    useSslConnector= false
    clientMustAuthenticate= false
    keyStoreLocation= "src/test/resources/keystore"
    keyStorePass= "testing"
    trustStoreLocation= "src/test/resources/keystore"
    trustStorePass= "testing"
    gracefulShutdownMs= 100
  }

  bind {
    declaredAddressOpt = "127.0.0.1"
    bindAddress = "127.0.0.1"
    applicationName = "asado"
    handshakeTimeoutMs = 500
    maxNumConnections = 100
    connectionTimeout = 60
    localOnly = false
    connectionRetryIntervalSecs = 60
    appVersion = "1.0.0"
  }

  blockchain {
    inflationRatePerBlock = 1000
    spendDelayBlocks = 2
    maxTxPerBlock = 100
    maxBlockOpenSecs = 200
    maxSignatures = 8
    numTxWriters = 5
    numBlocksCached = 2
  }

  upnp_hide {
    upnpGatewayTimeoutOpt = 5
    upnpDiscoverTimeoutOpt = 5
  }

  database {
    datasource {
      driver = "org.hsqldb.jdbc.JDBCDriver"
      user = "SA"
      pass = ""
      connectionProperties = ""
      maxPoolSize = 10
      cachePrepStmts = true
      prepStmtCacheSize = 250
      prepStmtCacheSqlLimit = 2048
      useServerPrepStmts = true
      transactionIsolationLevel = "TRANSACTION_READ_COMMITTED"
    }
    freeBlobsEarly = true
    useShutdownHook = true
    viewCachesSize = 100

  }
}

include "nodes.conf"


discovery-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 2
  }
  throughput = 1
}


blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"



  remote {
    enabled-transports = [akka.remote.netty.ssl]

    netty.ssl.security {
      key-store = "mykeystore"
      trust-store = "mytruststore"
      key-store-password = "changeme"
      key-password = "changeme"
      trust-store-password = "changeme"
      protocol = "TLSv1.2"
      random-number-generator = "AS128CounterSecureRNG"
      enabled-algorithms = [TLS_RSA_WITH_AES_128_CBC_SHA]
    }
  }

  actor {
    debug {
      fsm = off
    }
  }

  io {
    tcp {
      direct-buffer-size = 256 KiB
      trace-logging = off
      max-received-message-size = 5120 KiB
    }
  }
}