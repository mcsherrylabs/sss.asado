package sss.openstar.peers

import java.net.{Inet4Address, InetAddress, InetSocketAddress}

import sss.db._

object Experi {

  val db = Db()

  private val createTableSql =
    s"""CREATE TABLE IF NOT EXISTS EXPERI
       |(id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
       |col_chars VARCHAR(64),
       |col_ary BINARY(16),
       |PRIMARY KEY(id), UNIQUE(col_ary));
       |""".stripMargin

  private val indx = "CREATE INDEX IF NOT EXISTS experi_indx ON EXPERI (col_ary);"

  def main(args: Array[String]): Unit = {
    db.createView(createTableSql)
    db.executeSql(indx)
    val t = db.table("EXPERI")

    val ip4Prefix: Array[Byte] = Array.fill[Byte](10)(0) ++ Array.fill[Byte](2)(-1)

    val s = Seq("www.google.at", "openstar.io")

    s foreach { a =>
      println(a)
      InetAddress.getAllByName(a) foreach { i =>
        println(i)
        val adjusted = if(i.isInstanceOf[Inet4Address]) {
          ip4Prefix ++  i.getAddress
        } else i.getAddress
        t.persist(Map("col_chars" -> i.getHostName, "col_ary" -> adjusted))
      }
    }

    t.foreach ({ r =>
      val addr = InetAddress.getByAddress(r[Array[Byte]]("col_ary"))

      println(s"$addr ")
    }, OrderDesc("col_ary"))

    t.foreach ({ r =>
      val addr = InetAddress.getByAddress(r[Array[Byte]]("col_ary"))

      println(s"$addr ")
    }, OrderAsc("col_ary"))


  }
}
