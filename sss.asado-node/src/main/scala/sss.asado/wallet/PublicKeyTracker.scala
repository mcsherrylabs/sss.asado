package sss.asado.wallet

import java.util.Date

import akka.util.ByteString
import scorex.crypto.signatures.SigningFunctions.PublicKey
import sss.asado.UniqueNodeIdentifier
import sss.asado.util.ByteArrayEncodedStrOps._
import sss.db._

/**
  * Created by alan on 6/28/16.
  */
object PublicKeyTracker {

  private val idCol = "id"
  private val nodeIdCol = "node_id"
  private val createdAtCol = "created_at"
  private val pkeyCol = "pkey"
  private val tableName = s"track_public_key"

}

class PublicKeyTracker(nodeId :UniqueNodeIdentifier)(implicit db: Db) {

  import PublicKeyTracker._

  def tx[T](f: => T): T = db.tx[T](f)

  def isTracked(pKey: PublicKey): Boolean = isTrackedBase64(pKey.toBase64Str)

  def isTrackedBase64(pKey: String): Boolean = {
    table
      .find(
        where(
          nodeIdCol -> nodeId,
          pkeyCol -> pKey
        )
      ).isDefined
  }

  def keys: Seq[String] = table
    .filter(
      where(nodeIdCol -> nodeId)
    ) map (_[String](pkeyCol))

  def track(pKey: PublicKey): Unit = trackBase64(pKey.toBase64Str)

  def unTrack(pKey: PublicKey): Unit = unTrackBase64(pKey.toBase64Str)

  def unTrackBase64(pKey: String): Boolean = table
    .delete(
      where(
        nodeIdCol -> nodeId,
        pkeyCol -> pKey
      )
    ) == 1

  def trackBase64(pKey: String): Unit = table
    .insert(Map(
      nodeIdCol -> nodeId,
      pkeyCol -> pKey,
      createdAtCol -> new Date().getTime
    ))


  private val createTableSql =
    s"""CREATE TABLE IF NOT EXISTS ${tableName}
        |($idCol BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
        |$nodeIdCol VARCHAR(100),
        |$pkeyCol VARCHAR(100),
        |$createdAtCol BIGINT,
        |PRIMARY KEY($nodeIdCol, $pkeyCol));
        |""".stripMargin

  db.executeSql(createTableSql)

  private val table = db.table(tableName)


}
