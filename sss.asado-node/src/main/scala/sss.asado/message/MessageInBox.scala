package sss.asado.message

import java.util.Date

import org.joda.time.LocalDateTime
import sss.asado.UniqueNodeIdentifier
import sss.asado.ledger._
import sss.db._



object MessageInBox {
  private val idCol = "id"
  private val fromCol = "from_col"
  private val toCol = "to_col"
  private val statusCol = "status_col"
  private val txCol = "tx_col"
  private val messageCol = "message"
  private val createdAtCol = "created_at"

  private val statusNew = 0
  private val statusArchived = 1
  private val statusSentConfirmed = 2
  private val statusDeleted = 3

  private val messageTableNamePrefix = "message_"

  def apply(identity: UniqueNodeIdentifier)(implicit db:Db): MessageInBox = new MessageInBox(identity)


  class MessagePage[M](page: Page, f: Row => M) {
    lazy val hasNext: Boolean = page.hasNext
    lazy val hasPrev: Boolean = page.hasPrev
    val messages: Seq[M] = page.rows map (f)
    lazy val next: MessagePage[M] = new MessagePage[M](page.next, f)
    lazy val prev: MessagePage[M] = new MessagePage[M](page.prev, f)
  }
}

class MessageInBox(id: UniqueNodeIdentifier)(implicit val db: Db)  {


  import MessageInBox._

  private val tableName = s"${messageTableNamePrefix}${id}"
  private val sentTableName =  s"${tableName}_sent"

  db.executeSql (s"CREATE TABLE IF NOT EXISTS $sentTableName (" +
    s"$idCol BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), " +
    s"$toCol VARCHAR(100), " +
    s"$statusCol INT, " +
    s"$txCol BLOB, " +
    s"$messageCol BLOB, " +
    s"$createdAtCol BIGINT, " +
    s"PRIMARY KEY($idCol));")

  db.executeSql (s"CREATE TABLE IF NOT EXISTS $tableName (" +
    s"$idCol BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), " +
    s"$fromCol VARCHAR(100), " +
    s"$statusCol INT, " +
    s"$txCol BLOB, " +
    s"$messageCol BLOB, " +
    s"$createdAtCol BIGINT, " +
    s"PRIMARY KEY($idCol));")

  lazy private val table = db.table(tableName)
  lazy private val sentTable = db.table(sentTableName)


  private def toMsg(r:Row): Message = Message(
    id,
    r[String](fromCol),
    r[Array[Byte]](messageCol).toMessagePayload,
    r[Array[Byte]](txCol),
    r[Long](idCol),
    new LocalDateTime(r[Long](createdAtCol)))

  private def toAddressedMsg(r:Row): AddressedMessage = AddressedMessage(
    id,
    r[Array[Byte]](txCol).toLedgerItem,
    r[Array[Byte]](messageCol).toMessagePayload)

  private def toSavedAddressedMsg(r:Row): SavedAddressedMessage = SavedAddressedMessage(
    r[String](toCol),
    r[Long](idCol),
    new LocalDateTime(r[Long](createdAtCol)),
    toAddressedMsg(r))

  def addNew(msg: Message): Message = table.tx {

    toMsg(table.persist(Map(
      idCol -> msg.index,
      fromCol -> msg.from,
      statusCol -> statusNew,
      messageCol -> msg.msgPayload.toBytes,
      txCol -> msg.tx,
      createdAtCol -> msg.createdAt.toDate.getTime)))
  }

  def addSent(to: UniqueNodeIdentifier, msgPayload: MessagePayload, txBytes: Array[Byte]): SavedAddressedMessage = {
    toSavedAddressedMsg(sentTable.insert(Map(
      toCol -> to,
      statusCol -> statusNew,
      messageCol -> msgPayload.toBytes,
      txCol -> txBytes,
      createdAtCol -> new Date().getTime)))
  }

  def pageSent(lastReadindex: Long, pageSize: Int): Seq[AddressedMessage] = {

    sentTable.filter(

      where(s"$idCol > ? AND $statusCol = ?)", lastReadindex, statusNew)
        .orderBy(OrderAsc(idCol))
          .limit(pageSize)

    ).map(toAddressedMsg)
  }

  def sentPager(pageSize: Int) =
    new MessagePage(PagedView(sentTable, pageSize, (s"$statusCol = ?", Seq(statusNew))).lastPage, toSavedAddressedMsg)

  def inBoxPager(pageSize: Int) =
    new MessagePage(PagedView(table, pageSize, (s"$statusCol = ?", Seq(statusNew))).lastPage, toMsg)

  def archivedPager(pageSize: Int) =
    new MessagePage(PagedView(table, pageSize, (s"$statusCol = ?", Seq(statusArchived))).lastPage, toMsg)


  def archive(index: Long) = table.update(Map(idCol ->  index, statusCol -> statusArchived))

  def deleteSent(index: Long): Boolean = sentTable.delete(where(s"$idCol = ?") using (index)) == 1

  def delete(index: Long) = table.update(Map(idCol ->  index, statusCol -> statusDeleted, messageCol -> None))

  def maxInIndex = table.maxId
}